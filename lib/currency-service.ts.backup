// Currency conversion service based on user's country

export interface CurrencyInfo {
  code: string;
  symbol: string;
  name: string;
  conversionRate: number; // Rate from INR base price
}

// Supported currencies with conversion rates (INR as base)
export const SUPPORTED_CURRENCIES: Record<string, CurrencyInfo> = {
  'IN': { code: 'INR', symbol: '₹', name: 'Indian Rupee', conversionRate: 1 },
  'US': { code: 'USD', symbol: '$', name: 'US Dollar', conversionRate: 0.012 },
  'GB': { code: 'GBP', symbol: '£', name: 'British Pound', conversionRate: 0.0095 },
  'CA': { code: 'CAD', symbol: 'C$', name: 'Canadian Dollar', conversionRate: 0.016 },
  'AU': { code: 'AUD', symbol: 'A$', name: 'Australian Dollar', conversionRate: 0.018 },
  'SG': { code: 'SGD', symbol: 'S$', name: 'Singapore Dollar', conversionRate: 0.016 },
  'AE': { code: 'AED', symbol: 'د.إ', name: 'UAE Dirham', conversionRate: 0.044 },
  'DE': { code: 'EUR', symbol: '€', name: 'Euro', conversionRate: 0.011 },
  'FR': { code: 'EUR', symbol: '€', name: 'Euro', conversionRate: 0.011 },
  'IT': { code: 'EUR', symbol: '€', name: 'Euro', conversionRate: 0.011 },
  'ES': { code: 'EUR', symbol: '€', name: 'Euro', conversionRate: 0.011 },
  'NL': { code: 'EUR', symbol: '€', name: 'Euro', conversionRate: 0.011 },
  'JP': { code: 'JPY', symbol: '¥', name: 'Japanese Yen', conversionRate: 1.8 },
  'KR': { code: 'KRW', symbol: '₩', name: 'South Korean Won', conversionRate: 16 },
  'BR': { code: 'BRL', symbol: 'R$', name: 'Brazilian Real', conversionRate: 0.07 },
  'MX': { code: 'MXN', symbol: '$', name: 'Mexican Peso', conversionRate: 0.24 },
};

// Default fallback currency (INR for India)
const DEFAULT_CURRENCY = SUPPORTED_CURRENCIES['IN'];

// Get user's country code from various sources
export async function getUserCountry(): Promise<string> {
  try {
    // Method 1: Try to get from IP geolocation API
    const response = await fetch('https://ipapi.co/json/', {
      method: 'GET',
      headers: { 'Accept': 'application/json' }
    });
    
    if (response.ok) {
      const data = await response.json();
      if (data.country_code) {
        console.log('Country detected via IP:', data.country_code);
        return data.country_code.toUpperCase();
      }
    }
  } catch (error) {
    console.warn('IP geolocation failed:', error);
  }

  try {
    // Method 2: Try browser's Intl API
    const locale = Intl.DateTimeFormat().resolvedOptions().locale;
    if (locale) {
      const countryCode = locale.split('-')[1]?.toUpperCase();
      if (countryCode) {
        console.log('Country detected via Intl API:', countryCode);
        return countryCode;
      }
    }
  } catch (error) {
    console.warn('Intl API failed:', error);
  }

  // Method 3: Try navigator.language
  try {
    const language = navigator.language || navigator.languages?.[0];
    if (language) {
      const countryCode = language.split('-')[1]?.toUpperCase();
      if (countryCode) {
        console.log('Country detected via navigator:', countryCode);
        return countryCode;
      }
    }
  } catch (error) {
    console.warn('Navigator language detection failed:', error);
  }

  // Default to India
  console.log('Using default country: IN');
  return 'IN';
}

// Get currency info for a country
export function getCurrencyForCountry(countryCode: string): CurrencyInfo {
  return SUPPORTED_CURRENCIES[countryCode] || DEFAULT_CURRENCY;
}

// Convert price from INR base to target currency
export function convertPrice(priceInINR: number, targetCurrency: CurrencyInfo): number {
  const convertedPrice = priceInINR * targetCurrency.conversionRate;
  
  // Round to appropriate decimal places based on currency
  if (targetCurrency.code === 'JPY' || targetCurrency.code === 'KRW') {
    return Math.round(convertedPrice); // No decimals for Yen/Won
  } else {
    return Math.round(convertedPrice * 100) / 100; // 2 decimal places
  }
}

// Format price with currency symbol
export function formatPrice(amount: number, currency: CurrencyInfo): string {
  return `${currency.symbol}${amount.toLocaleString()}`;
}

// Get currency display info for user
export async function getUserCurrencyInfo(): Promise<{
  currency: CurrencyInfo;
  countryCode: string;
}> {
  const countryCode = await getUserCountry();
  const currency = getCurrencyForCountry(countryCode);
  
  return { currency, countryCode };
}

// Convert plan prices based on user's currency
export interface PlanPricing {
  monthly: number;
  annual: number;
  currency: CurrencyInfo;
  formattedMonthly: string;
  formattedAnnual: string;
}

export async function getLocalizedPricing(basePrices: {
  monthly: number; // Base price in INR
  annual: number;  // Base price in INR
}): Promise<PlanPricing> {
  const { currency } = await getUserCurrencyInfo();
  
  const monthly = convertPrice(basePrices.monthly, currency);
  const annual = convertPrice(basePrices.annual, currency);
  
  return {
    monthly,
    annual,
    currency,
    formattedMonthly: formatPrice(monthly, currency),
    formattedAnnual: formatPrice(annual, currency)
  };
}